{"version":3,"file":"src_app_auth_reset-password_reset-password_module_ts.js","mappings":"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","sources":["./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/reset-password/reset-password.component.html","./src/app/auth/reset-password/reset-password.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { DataService } from 'src/app/service/data.service';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\nimport { CommonFunction, PasswordValidation } from 'src/app/shared/common';\r\nimport { UserService } from 'src/app/service/user.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n  resetPasswordForm: FormGroup;\r\n  formErrors = {\r\n    error: null,\r\n    success: null,\r\n  };\r\n  showLoader = false;\r\n  forgatAuth: any;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: UserService,\r\n    private dataService: DataService,\r\n    private fBuilder: FormBuilder,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.resetPasswordForm = this.fBuilder.group({\r\n      new_password: [null, Validators.compose([Validators.required])], // validatePassword\r\n      confirm_password: [null, Validators.compose([Validators.required])],\r\n    }, {\r\n      validator: PasswordValidation.passwordValidation()\r\n    });\r\n    this.dataService.forgatAuth.subscribe((response) => {\r\n      if (response) {\r\n        this.forgatAuth = response;\r\n      } else {\r\n        this.router.navigateByUrl('/forgot-password')\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() { }\r\n\r\n  submitForm(): void {\r\n    if (this.resetPasswordForm.valid) {\r\n      this.showLoader = true;\r\n      const formData = {\r\n        tenantCode: this.forgatAuth.tenantCode,\r\n        emailId: this.forgatAuth['emailId'],\r\n        password: this.resetPasswordForm.value.confirm_password,\r\n      };\r\n      this.authService.changePassword(formData).subscribe((response) => {\r\n        this.showLoader = false;\r\n        if (response && response.status == \"Ok\") {\r\n          this.toastrService.success(response.message);\r\n          this.formErrors.success = `* ${response.message}`;\r\n          this.router.navigateByUrl('/login');\r\n          setTimeout(() => { CommonFunction.resetForm(this.resetPasswordForm); }, 1000);\r\n        } else {\r\n          this.toastrService.success(response.status);\r\n          this.formErrors.error = `* ${response.error}`;\r\n        }\r\n      }, (error) => {\r\n        this.formErrors.error = `* ${error.error}`;\r\n        this.showLoader = false;\r\n        // this.toastrService.success(error.error.message);\r\n        this.router.navigateByUrl('/login');\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"wrapper\">\r\n  <div class=\"main_container\">\r\n    <div class=\"container\">\r\n      <div class=\"row main_row\">\r\n        <div class=\"col-lg-6 col-md-12\">\r\n          <div class=\"form_container\">\r\n            <div class=\"header\">\r\n              <div class=\"logo\">\r\n                <img src=\"../../../assets/images/logo.svg\" class=\"img-fluid\" />\r\n              </div>\r\n              <div class=\"btn_back\">\r\n                <a routerBack>\r\n                  <mat-icon>keyboard_backspace</mat-icon>{{'BUTTON.BACK'|translate}}\r\n                </a>\r\n              </div>\r\n              <div class=\"heading\">\r\n                <h1 class=\"title\">{{'RESETPASSWORD.SETNEWPASSOWORD'|translate}}</h1>\r\n                <p class=\"subtitle\">{{'RESETPASSWORD.MESSAGE'|translate}}</p>\r\n              </div>\r\n            </div>\r\n            <form [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"submitForm()\">\r\n              <div class=\"form-group paddingLabel required\">\r\n                <div class=\"text_field\">\r\n                  <label for=\"new_password\">{{'RESETPASSWORD.NEWPASSWORD'|translate}}</label>\r\n                  <mat-form-field appearance=\"outline\" class=\"w-100 h-60\">\r\n                    <input type=\"password\" [formControl]=\"resetPasswordForm.controls['new_password']\" matInput\r\n                      placeholder=\"{{'RESETPASSWORD.PLACEHOLDER'|translate}}\" class=\"fas fa-eye-slash\">\r\n                  </mat-form-field>\r\n                </div>\r\n                <div class=\"text_field\">\r\n                  <label for=\"confirm_password\">{{'RESETPASSWORD.CONFIRMPASSWORD'|translate}}</label>\r\n                  <mat-form-field appearance=\"outline\" class=\"w-100 h-60\">\r\n                    <input type=\"password\" [formControl]=\"resetPasswordForm.controls['confirm_password']\" matInput\r\n                      placeholder=\"{{'RESETPASSWORD.PLACEHOLDER'|translate}}\" class=\"fas fa-eye-slash\">\r\n                  </mat-form-field>\r\n                </div>\r\n              </div>\r\n              <div class=\"button_submit\">\r\n                <a>\r\n                  <button type=\"submit\" class=\"loginbutton\" [disabled]=\"showLoader\">\r\n                    {{'RESETPASSWORD.RESET_PASSWORD'|translate}}\r\n                  </button>\r\n                </a>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 col-md-12\">\r\n          <div class=\"right_bg\">\r\n            <img src=\"../../../assets/images/login/authmodule_login_charimage.svg\" class=\"img-fluid img1\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<!-- <div class=\"container\">\r\n  <mat-card class=\"form-container login-container\">\r\n    <form action=\"#\">\r\n      <div>\r\n        <h2 class=\"logo\"> </h2>\r\n      </div>\r\n      <div class=\"social-container\">\r\n        <a href=\"#\" class=\"social\"> <i class=\"fab fa-facebook-f\"> </i> </a>\r\n        <a href=\"#\" class=\"social\"> <i class=\"fab fa-google-plus-g\"> </i> </a>\r\n        <a href=\"#\" class=\"social\"> <i class=\"fab fa-linkedin-in\"> </i> </a>\r\n      </div>\r\n      <div class=\"btn_back\">\r\n        <a routerBack>\r\n          <img src=\"../../../assets/images/login/btn_arrow.svg\" /> Back\r\n        </a>\r\n      </div>\r\n      <div>\r\n        <h1> Set New Password </h1>\r\n      </div>\r\n      <div class=\"form-group paddingLabel required\">\r\n        <mat-form-field appearance=\"outline\" class=\"w-100 h-60\">\r\n          <mat-label class=\"label\">New Password</mat-label>\r\n          <input matInput placeholder=\"***********\" class=\"fas fa-eye-slash\">\r\n        </mat-form-field>\r\n        <mat-form-field appearance=\"outline\" class=\"w-100 h-60\">\r\n          <mat-label class=\"label\"> Confirm Password</mat-label>\r\n          <input matInput placeholder=\"*************\" class=\"fas fa-eye-slash\">\r\n        </mat-form-field>\r\n      </div>\r\n      <div class=\"buttons\">\r\n        <button type=\"submit\" mat-raised-button class=\"loginbutton\"\r\n          [ngClass]=\"{'qt-loader qt-loader-mini qt-loader-left': showLoader}\" [disabled]=\"showLoader\">\r\n          Reset Password\r\n        </button>\r\n      </div>\r\n    </form>\r\n\r\n    <div class=\"col-md-12\">\r\n      <img src=\"../../../assets/images/login/image nec.png\" class=\"img1\">\r\n    </div>\r\n  </mat-card>\r\n</div> -->\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResetPasswordComponent } from './reset-password.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\nimport { FormValidationModule } from 'src/app/shared/form-validation/form-validation.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { I18nModule } from 'src/app/shared/i18n/i18n.module';\r\nimport { MaterialExModule } from 'src/app/shared/material.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetPasswordComponent,\r\n    data: { title: 'reset-password' }\r\n  }\r\n];\r\n@NgModule({\r\n  declarations: [\r\n    ResetPasswordComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FormValidationModule,\r\n    SharedModule,\r\n    MaterialExModule,\r\n    I18nModule,\r\n     RouterModule.forChild(routes)\r\n  ],\r\n  providers: [\r\n    AuthService\r\n  ]\r\n})\r\nexport class ResetPasswordModule { }\r\n"],"names":[],"sourceRoot":"webpack:///"}