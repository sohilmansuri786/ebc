{"version":3,"file":"src_app_auth_verify-opt_verify-opt_module_ts.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,kDAAkD,aAAa;AAC/D,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,GAAG,GAAG,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+DAA+D,kBAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sCAAsC,+DAAwB;AACnI,yCAAyC,+DAAwB,GAAG,oEAAoE,kBAAkB,aAAa,gCAAgC,kgBAAkgB;AACzsB,QAAQ,wDAAiB;AACzB,MAAM;AACN,QAAQ,wDAAiB;AACzB,OAAO,4BAA4B,QAAQ,iDAAW,EAAE,oDAAc,EAAE,oDAAc,EAAE,gEAA2B,uBAAuB,4DAAuB,EAAE,2DAAsB,EAAE,gEAA2B,IAAI,uBAAuB,oBAAoB,0CAA0C,WAAW,YAAY,kBAAkB,yBAAyB,kBAAkB,eAAe,6EAA6E,iBAAiB,qCAAqC,8BAA8B,WAAW,eAAe,aAAa,qCAAqC,8BAA8B,WAAW,eAAe,aAAa,IAAI;AACxsB;AACA,UAAU;AACV;AACA,oCAAoC,6CAA6C;AACjF,IAAI;AACJ;AACA;AACA;AACA,MAAM;AACN;AACA,WAAW,wBAAwB,6CAA6C,IAAI;AACpF;AACA,eAAe,MAAM,gDAAK,EAAE;AAC5B,sBAAsB,MAAM,iDAAM,EAAE;AACpC;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA,kDAAkD,uBAAuB,YAAY,cAAc,8UAA8U,mBAAmB,gFAAgF,yEAAyE,GAAG,GAAG,cAAc;AACjnB,qCAAqC,WAAW,YAAY,kBAAkB,yBAAyB,kBAAkB,eAAe,qCAAqC,iBAAiB,qCAAqC,WAAW,WAAW,eAAe,aAAa,qCAAqC,WAAW,WAAW,eAAe,aAAa;AAC5W,aAAa;AACb,KAAK,iBAAiB,UAAU,gBAAgB,IAAI,IAAI;AACxD,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,sCAAsC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,CAAC,oDAAgB;AACjM,yCAAyC,+DAAwB,GAAG,0EAA0E,4CAA4C;AAC1L;AACA,UAAU;AACV;AACA,oCAAoC,6CAA6C;AACjF,IAAI;AACJ;AACA;AACA;AACA,MAAM,MAAM,qDAAU,EAAE;AACxB,MAAM,MAAM,oDAAS;AACrB;AACA,WAAW,wBAAwB,6CAA6C,IAAI;AACpF;AACA,2BAA2B,MAAM,gDAAK,EAAE;AACxC;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,MAAM,oDAAgB,EAAE,IAAI,IAAI;AAC7F,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA,+DAA+D;AAC/D,sCAAsC,8DAAuB,GAAG,wBAAwB;AACxF,sCAAsC,8DAAuB,GAAG;AAChE,YAAY,yDAAY;AACxB,YAAY,uDAAW;AACvB,YAAY,+DAAmB;AAC/B,YAAY;AACZ,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA,oBAAoB,yDAAY;AAChC,oBAAoB,uDAAW;AAC/B,oBAAoB,+DAAmB;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,qBAAqB,4BAA4B,8DAA8D,yBAAyB,QAAQ,yDAAY;AACvP,QAAQ,uDAAW;AACnB,QAAQ,+DAAmB,IAAI,yBAAyB,iCAAiC,IAAI;;AAE7F;AACA;AACA;;AAEA;AACA;AACA;;AAE4F","sources":["./src/app/auth/verify-opt/verify-opt.component.ts","./src/app/auth/verify-opt/verify-opt.component.html","./src/app/auth/verify-opt/verify-opt.module.ts","./node_modules/ng-otp-input/__ivy_ngcc__/fesm2015/ng-otp-input.js"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { DataService } from 'src/app/service/data.service';\r\n@Component({\r\n  selector: 'app-verify-opt',\r\n  templateUrl: './verify-opt.component.html',\r\n  styleUrls: ['./verify-opt.component.scss']\r\n})\r\nexport class VerifyOptComponent implements OnInit {\r\n  otpForm: FormGroup;\r\n  forgatAuth: any = null;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private fBuilder: FormBuilder,\r\n    private dataService: DataService,\r\n    private toastrService: ToastrService\r\n  ) {\r\n    this.otpForm = this.fBuilder.group({\r\n      otp: [null, Validators.compose([Validators.required, Validators.minLength(5)])],\r\n    });\r\n    this.dataService.forgatAuth.subscribe((response) => {\r\n      if (response) {\r\n        this.forgatAuth = response;\r\n      } else {\r\n        this.router.navigateByUrl('/forgot-password')\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() { }\r\n  onOtpChange(data) {\r\n    this.otpForm.patchValue({ otp: data })\r\n  }\r\n\r\n  submitForm(): void {\r\n    if (this.otpForm.valid) {\r\n      if (Number(this.forgatAuth.data) == Number(this.otpForm.value['otp'])) {\r\n        this.router.navigateByUrl('/reset-password')\r\n      } else {\r\n        this.toastrService.error('Invalid OTP')\r\n      }\r\n    }\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <div class=\"main_container\">\r\n    <div class=\"container\">\r\n      <div class=\"row main_row\">\r\n        <div class=\"col-lg-6 col-md-12\">\r\n          <div class=\"form_container\">\r\n            <div class=\"header\">\r\n              <div class=\"logo\">\r\n                <img src=\"assets/images/logo.svg\" class=\"img-fluid\" />\r\n              </div>\r\n              <div class=\"btn_back\">\r\n                <a routerBack>\r\n                  <mat-icon>keyboard_backspace</mat-icon>{{'BUTTON.BACK'|translate}}\r\n                </a>\r\n              </div>\r\n              <div class=\"heading\">\r\n                <h1 class=\"title\"> {{'VERIFYOTP.VERIFICATION'|translate}} </h1>\r\n                <p class=\"subtitle\">{{'VERIFYOTP.MESSAGE'|translate}}</p>\r\n              </div>\r\n            </div>\r\n            <form [formGroup]=\"otpForm\" (ngSubmit)=\"submitForm()\">\r\n              <div class=\"text_field\">\r\n                <label for=\"\">{{'VERIFYOTP.OTP'|translate}}</label>\r\n                <div class=\"form-group paddingLabel required\">\r\n                  <ng-otp-input (onInputChange)=\"onOtpChange($event)\" [config]=\"{length:5}\">\r\n                  </ng-otp-input>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"button_submit\">\r\n                <a>\r\n                  <button type=\"submit\" class=\"loginbutton\">\r\n                    {{'VERIFYOTP.VERIFY_OTP'|translate}}\r\n                  </button>\r\n                </a>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-lg-6 col-md-12\">\r\n          <div class=\"right_bg\">\r\n            <img src=\"../../../assets/images/login/authmodule_login_charimage.svg\" class=\"img-fluid img1\">\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { VerifyOptComponent } from './verify-opt.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\nimport { FormValidationModule } from 'src/app/shared/form-validation/form-validation.module';\r\nimport { NgOtpInputModule } from 'ng-otp-input';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { I18nModule } from 'src/app/shared/i18n/i18n.module';\r\nimport { MaterialExModule } from 'src/app/shared/material.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: VerifyOptComponent,\r\n    data: { title: 'verify-opt' }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VerifyOptComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FormValidationModule,\r\n    NgOtpInputModule,\r\n    SharedModule,\r\n    MaterialExModule,\r\n    I18nModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  providers: [\r\n    AuthService\r\n  ]\r\n})\r\nexport class VerifyOptModule { }\r\n","import { Pipe, EventEmitter, Component, Input, Output, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"input\", 3);\n    ɵngcc0.ɵɵlistener(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onKeyDown($event); })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r5); const i_r3 = restoredCtx.index; const ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onKeyUp($event, i_r3); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"disabledNumberOnly\", !ctx_r1.config.allowNumbersOnly)(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n} }\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, \"input\", 2);\n    ɵngcc0.ɵɵpipe(2, \"keys\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"wrapper \", ctx_r0.config.containerClass, \"\");\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n} }\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\nKeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };\nKeysPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"keys\", type: KeysPipe, pure: true });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(KeysPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'keys'\n            }]\n    }], null, null); })();\n\nclass Config {\r\n}\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        this.inputType = this.getInputType();\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                containerItem.addEventListener('paste', (evt) => this.handlePaste(evt));\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    ifLeftArrow(event) {\r\n        return this.ifKeyCode(event, 37);\r\n    }\r\n    ifRightArrow(event) {\r\n        return this.ifKeyCode(event, 39);\r\n    }\r\n    ifBackspaceOrDelete(event) {\r\n        return (event.key === 'Backspace' ||\r\n            event.key === 'Delete' ||\r\n            this.ifKeyCode(event, 8) ||\r\n            this.ifKeyCode(event, 46));\r\n    }\r\n    ifKeyCode(event, targetCode) {\r\n        const key = event.keyCode || event.charCode;\r\n        // tslint:disable-next-line: triple-equals\r\n        return key == targetCode ? true : false;\r\n    }\r\n    onKeyDown($event) {\r\n        var isSpace = this.ifKeyCode($event, 32);\r\n        if (isSpace) { // prevent space\r\n            return false;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (this.ifRightArrow($event)) {\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (this.ifLeftArrow($event)) {\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        const isBackspace = this.ifBackspaceOrDelete($event);\r\n        if (isBackspace && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidEntry($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidEntry(event) {\r\n        const inp = String.fromCharCode(event.keyCode);\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)) ||\r\n            (event.keyCode >= 96 && event.keyCode <= 105));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        this.onInputChange.emit(val);\r\n    }\r\n    getInputType() {\r\n        return this.config.isPasswordInput\r\n            ? 'password'\r\n            : this.config.allowNumbersOnly\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };\nNgOtpInputComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [[\"ng-otp-input\"]], inputs: { config: \"config\" }, outputs: { onInputChange: \"onInputChange\" }, decls: 1, vars: 1, consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"keydown\", \"keyup\", 4, \"ngFor\", \"ngForOf\"], [\"numberOnly\", \"\", \"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"disabledNumberOnly\", \"ngStyle\", \"formControl\", \"id\", \"keydown\", \"keyup\"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective]; }, pipes: function () { return [KeysPipe]; }, styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"] });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nNgOtpInputComponent.ctorParameters = () => [\r\n    { type: KeysPipe }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nNgOtpInputComponent.propDecorators = {\r\n    config: [{ type: Input }],\r\n    onInputChange: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{\n        type: Component,\n        args: [{\n                // tslint:disable-next-line: component-selector\n                selector: 'ng-otp-input',\n                template: \"<div class=\\\"wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\" numberOnly [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [disabledNumberOnly]=\\\"!config.allowNumbersOnly\\\" [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" id=\\\"otp_{{i}}_{{componentKey}}\\\" (keydown)=\\\"onKeyDown($event)\\\"\\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\">\\r\\n</div>\",\n                styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"]\n            }]\n    }], function () { return [{ type: KeysPipe }]; }, { config: [{\n            type: Input\n        }], onInputChange: [{\n            type: Output\n        }] }); })();\n\nclass NumberOnlyDirective {\r\n    constructor(_elRef, _renderer) {\r\n        this._elRef = _elRef;\r\n        this._renderer = _renderer;\r\n    }\r\n    ngOnInit() {\r\n        if (!this.disabledNumberOnly) {\r\n            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');\r\n        }\r\n    }\r\n}\nNumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nNumberOnlyDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [[\"\", \"numberOnly\", \"\"]], inputs: { disabledNumberOnly: \"disabledNumberOnly\" } });\r\n/**\r\n * @type {function(): !Array<(null|{\r\n *   type: ?,\r\n *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),\r\n * })>}\r\n * @nocollapse\r\n */\r\nNumberOnlyDirective.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 }\r\n];\r\n/** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */\r\nNumberOnlyDirective.propDecorators = {\r\n    disabledNumberOnly: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[numberOnly]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{\n            type: Input\n        }] }); })();\n\nclass NgOtpInputModule {\r\n}\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) { return new (t || NgOtpInputModule)(); };\nNgOtpInputModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgOtpInputModule });\nNgOtpInputModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [KeysPipe], imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule\n        ]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgOtpInputModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    FormsModule,\n                    ReactiveFormsModule\n                ],\n                declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],\n                exports: [NgOtpInputComponent],\n                providers: [KeysPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, { declarations: function () { return [NgOtpInputComponent, KeysPipe, NumberOnlyDirective]; }, imports: function () { return [CommonModule,\n        FormsModule,\n        ReactiveFormsModule]; }, exports: function () { return [NgOtpInputComponent]; } }); })();\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, NgOtpInputModule, KeysPipe as ɵa, NumberOnlyDirective as ɵb };\n\n"],"names":[],"sourceRoot":"webpack:///"}